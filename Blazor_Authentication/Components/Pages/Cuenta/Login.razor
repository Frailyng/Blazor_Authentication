@page "/login"

@using Blazor_Authentication.Models.ViewModels
@using Blazor_Authentication.DAL
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject AppDbContext appDbContext
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnInvalidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/Usuario.png" style="max-height:5rem;" />
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>Nombre Usuario</label>
                <InputText @bind-Value="Model.NombreUsuario" class="form-control" placeholder="NombreUsuario" />
                <ValidationMessage For="() => Model.NombreUsuario" />
            </div>
            <div class="mb-3">
                <label>Contraseña</label>
                <InputText @bind-Value="Model.Contraseña" placeholder="Contraseña" type="password" class="form-control" />
                <ValidationMessage For="() => Model.Contraseña" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>

    </div>

</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext{ get; set; }
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var Cuentausuario = appDbContext.CuentaUsuario.Where(x => x.NombreUsuario == Model.NombreUsuario)
        .FirstOrDefault();
        if(Cuentausuario is null || Cuentausuario.Contraseña != Model.Contraseña)
        {
            errorMessage = "Nombre de usuario o contraseña son invalidos";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.NombreUsuario),
            new Claim(ClaimTypes.Role, Cuentausuario.Rol)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/");


    }

}
